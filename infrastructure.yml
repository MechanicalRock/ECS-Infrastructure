---
AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Infrastructure

Resources:
  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  Subnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: ap-southeast-2a
        CidrBlock: 10.0.0.0/24
        VpcId: !Ref VPC

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2b
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC

  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2c
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  RouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  RouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref RouteTable

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2IAMRole

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: ami-05b48eda7f92aadbe
      InstanceType: t2.small
      KeyName: temp_pair
      UserData:
        Fn::Base64:
          Fn::Join: [
            "",
            [
              "#!/bin/bash -xe\n",
              "sudo mkdir -p /data\n",
              "sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\n",
              "echo ECS_CLUSTER=", { Ref: ECSCluster }, " >> /etc/ecs/ecs.config;echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config;",
            ]
          ]

  AutoScalingGroup:
    DependsOn:
      - LifecycleRole
      - ASGSNSTopic
      - ASGSNSTopicPolicy
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: '1'
      MinSize: '1'
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3

  route53RS:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: sandbox.austal.io
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !ImportValue route53Infrastructure-HostedZone

  ECSCluster:
    Type: AWS::ECS::Cluster

  GrafanaTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        -
          Name: Grafana
          Image: "docker.io/grafana/grafana"
          Cpu: 0
          MemoryReservation: 1024
          PortMappings:
            -
              ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          Essential: true
          Environment:
            -
              Name: ECS_ENGINE_AUTH_DATA
              Value: "{\"https://index.docker.io/v1/\":{\"username\":\"gekosurf\",\"password\":\"Welcome02!\",\"email\":\"craig.knell@austal.com\"}}"
            -
              Name: ECS_ENGINE_AUTH_TYPE
              Value: dockercfg
            -
              Name: GF_INSTALL_PLUGINS
              Value: "grafana-simple-json-datasource"
          MountPoints:
            -
              SourceVolume: "grafana-config"
              ContainerPath: "/etc/grafana"
            -
              SourceVolume: "grafana-data"
              ContainerPath: "/var/lib/grafana"
            -
              SourceVolume: "grafana-logs"
              ContainerPath: "/var/log/grafana"
            -
              SourceVolume: "grafana-plugins"
              ContainerPath: "/var/lib/grafana/plugins"
            -
              SourceVolume: "grafana-provisioning"
              ContainerPath: "/etc/grafana/provisioning"
          User: root
          LogConfiguration:
            LogDriver: awslogs
            Options:
              "awslogs-group": NifiLogs
              "awslogs-region": "ap-southeast-2"
              "awslogs-stream-prefix": grafana-sandbox
      Family: Grafana
      Volumes:
        -
          Name: "grafana-data"
          Host:
            SourcePath: "/data/grafana/data"
        -
          Name: "grafana-logs"
          Host:
            SourcePath: "/data/grafana/logs"
        -
          Name: "grafana-plugins"
          Host:
            SourcePath: "/data/grafana/plugins"
        -
          Name: "grafana-provisioning"
          Host:
            SourcePath: "/data/grafana/provisioning"
        -
          Name: "grafana-config"
          Host:
            SourcePath: "/data/grafana/config"
      RequiresCompatibilities:
        -
          EC2
      Cpu: 256
      Memory: 1400

  InfluxDBTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        -
          Name: influxdb
          Image: "docker.io/influxdb"
          Cpu: 0
          PortMappings:
            -
              ContainerPort: 8086
              HostPort: 8086
              Protocol: tcp
          Essential: true
          Environment:
            -
              Name: ECS_ENGINE_AUTH_DATA
              Value: "{\"https://index.docker.io/v1/\":{\"username\":\"gekosurf\",\"password\":\"Welcome02!\",\"email\":\"craig.knell@austal.com\"}}"
            -
              Name: ECS_ENGINE_AUTH_TYPE
              Value: dockercfg
          MountPoints:
            -
              SourceVolume: "influxdb-data"
              ContainerPath: "/var/lib/influxdb"
            -
              SourceVolume: "influxdb-config"
              ContainerPath: "/etc/influxdb"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              "awslogs-group": NifiLogs
              "awslogs-region": "ap-southeast-2"
              "awslogs-stream-prefix": influxdb-sandbox
      Family: influxdb
      Volumes:
        -
          Name: "influxdb-data"
          Host:
            SourcePath: "/data/influxdb/data"
        -
          Name: "influxdb-config"
          Host:
            SourcePath: "/data/influxdb/config"
      Memory: 1024

  GrafanaService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: '1'
      LaunchType: EC2
      TaskDefinition: !Ref GrafanaTaskDef
      DeploymentConfiguration:
        -
          MaximumPercent: 200
          MinimumHealthyPercent: 50
      PlacementStrategy:
        -
          Type: spread
          Field: "attribute:ecs.availability-zone"
        -
          Type: spread
          Field: instanceId

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8000
      Protocol: TCP
      VpcId: !Ref VPC

  LifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_LAUNCHING'
      NotificationTargetARN: !Ref ASGSNSTopic
      RoleARN: !GetAtt LifecycleRole.Arn

  LifecycleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
            - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            AWS: "*"
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole

  ASGSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ECS AutoScaling Group Topic
      TopicName: ECS_ASG_Topic

  ASGSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: ECS_ASG_Topic_Policy
        Version: '2012-10-17'
        Statement:
        - Sid: AllowLifecycleRole
          Effect: Allow
          Principal:
            AWS: "*"
          Action: sns:Publish
          Resource: "*"
      Topics:
      - !Ref ASGSNSTopic

  SSMMountDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: "Command document for mounting the EBS volume"
        mainSteps:
        - action: "aws:runShellScript"
          name: "MountVolume"
          inputs:
            runCommand:
            - "mount /dev/xdvy /data"
      DocumentType: Command

  SSMMountDocument2:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: "Command document for mounting the EBS volume"
        mainSteps:
          - action: "aws:runShellScript"
            name: "MountVolume"
            inputs:
              runCommand:
                - "mount /dev/xdvcy /data"
      DocumentType: Command

  SSMMountDocument3:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: "Command document for mounting the EBS volume"
        mainSteps:
          - action: "aws:runShellScript"
            name: "MountVolume"
            inputs:
              runCommand:
                - "mount /dev/xvdcy /data"
      DocumentType: Command

  SSMMountDocument4:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: "Command document for mounting the EBS volume"
        mainSteps:
          - action: "aws:runShellScript"
            name: "MountVolume"
            inputs:
              runCommand:
                - "sudo mount /dev/xvdcy /data"
      DocumentType: Command

Outputs:
  TopicArn:
    Export:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'TopicArn']]
    Value: !Ref ASGSNSTopic

  DocumentName:
    Export:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'Document']]
    Value: !Ref SSMMountDocument

  DocumentName2:
    Export:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'Document2']]
    Value: !Ref SSMMountDocument2

  DocumentName3:
    Export:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'Document3']]
    Value: !Ref SSMMountDocument3

  DocumentName4:
    Export:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'Document4']]
    Value: !Ref SSMMountDocument4